{"version":3,"file":"index.js","sources":["uni_modules/wu-ui-tools/libs/function/color/index.js"],"sourcesContent":["import Color from './color';\r\n\r\n/**\r\n * 转换颜色格式。\r\n * @param {Object} params - 参数对象。\r\n * @param {string} color - 输入的颜色，默认为 '#fff'。\r\n * @param {string} format - 需要转换的格式（支持 'rgb', 'hex', 'hsl', 'hsv', 'hwb'）。\r\n * @param {string} type - 转换后的类型（支持 'string', 'object', 'array', 'round'）。\r\n * @returns {string|Object|Array} 转换后的颜色表示。\r\n */\r\nfunction convertFormat(color = '#fff', format = 'rgb', type = 'string') {\r\n\tlet colorObj = Color(color);\r\n\t// 如果格式存在\r\n\tif (colorObj[format]) {\r\n\t\t// hex 无法直接转换为 除string类型外的任何类型\r\n\t\t// 所以转为rgb 后 获取其他类型\r\n\t\tif(format == 'hex' && type != 'string') format = 'rgb';\r\n\t\t// 类型名称\r\n\t\tlet typeName = '';\r\n\t\tswitch (type) {\r\n\t\t\tcase 'string':\r\n\t\t\t\ttypeName = 'toString';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'object':\r\n\t\t\t\ttypeName = 'object';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'array':\r\n\t\t\t\ttypeName = 'array';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'round':\r\n\t\t\t\ttypeName = 'round';\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error('Unsupported target type:' + type)\r\n\t\t}\r\n\t\treturn colorObj[format]()[typeName]();\r\n\t} else {\r\n\t\tthrow Error('Unsupported target format: ' + format);\r\n\t}\r\n}\r\n\r\n/**\r\n * 计算两个颜色之间的渐变值。\r\n * @param {string} startColor - 开始的颜色，默认为黑色。\r\n * @param {string} endColor - 结束的颜色，默认为白色。\r\n * @param {number} step - 渐变的步数，默认为10。\r\n * @returns {Array<string>} 两个颜色之间的渐变颜色数组。\r\n */\r\nfunction gradient(startColor = 'rgb(0, 0, 0)', endColor = 'rgb(255, 255, 255)', step = 10) {\r\n\tconst startRGB = convertFormat(startColor, 'rgb', 'array') // 转换为rgb数组模式\r\n\tconst startR = startRGB[0]\r\n\tconst startG = startRGB[1]\r\n\tconst startB = startRGB[2]\r\n\r\n\tconst endRGB = convertFormat(endColor, 'rgb', 'array')\r\n\tconst endR = endRGB[0]\r\n\tconst endG = endRGB[1]\r\n\tconst endB = endRGB[2]\r\n\r\n\tconst sR = (endR - startR) / step // 总差值\r\n\tconst sG = (endG - startG) / step\r\n\tconst sB = (endB - startB) / step\r\n\tconst colorArr = []\r\n\tfor (let i = 0; i < step; i++) {\r\n\t\t// 计算每一步的hex值\r\n\t\tlet hex = convertFormat(`rgb(${Math.round((sR * i + startR))},${Math.round((sG * i + startG))},${Math.round((sB\r\n\t\t\t* i + startB))})`, 'hex')\r\n\t\t// 确保第一个颜色值为startColor的值\r\n\t\tif (i === 0) hex = convertFormat(startColor, 'hex')\r\n\t\t// 确保最后一个颜色值为endColor的值\r\n\t\tif (i === step - 1) hex = convertFormat(endColor, 'hex')\r\n\t\tcolorArr.push(hex)\r\n\t}\r\n\treturn colorArr\r\n}\r\n\r\n\r\n\r\nexport default {\r\n\t/**\r\n\t * 格式转换。\r\n\t */\r\n\tconvertFormat,\r\n\r\n\t/**\r\n\t * 计算两个颜色之间的渐变值。\r\n\t */\r\n\tgradient,\r\n\r\n\t/**\r\n\t * 增加颜色的亮度。\r\n\t * @param {string} color - 输入的颜色。\r\n\t * @param {number} value - 增加的亮度值（0-1）。\r\n\t * @returns {string} 调整后的颜色。\r\n\t */\r\n\tlighten: (color, value, format = 'rgb', type = 'string') => convertFormat(Color(color).lighten(value), format, type),\r\n\r\n\t/**\r\n\t * 减少颜色的亮度。\r\n\t * @param {string} color - 输入的颜色。\r\n\t * @param {number} value - 减少的亮度值（0-1）。\r\n\t * @returns {string} 调整后的颜色。\r\n\t */\r\n\tdarken: (color, value, format = 'rgb', type = 'string') => convertFormat(Color(color).darken(value), format, type),\r\n\r\n\t/**\r\n\t * 增加颜色的饱和度。\r\n\t * @param {string} color - 输入的颜色。\r\n\t * @param {number} value - 增加的饱和度值（0-1）。\r\n\t * @returns {string} 调整后的颜色。\r\n\t */\r\n\tsaturate: (color, value, format = 'rgb', type = 'string') => convertFormat(Color(color).saturate(value), format, type),\r\n\r\n\t/**\r\n\t * 减少颜色的饱和度。\r\n\t * @param {string} color - 输入的颜色。\r\n\t * @param {number} value - 减少的饱和度值（0-1）。\r\n\t * @returns {string} 调整后的颜色。\r\n\t */\r\n\tdesaturate: (color, value, format = 'rgb', type = 'string') => convertFormat(Color(color).desaturate(value), format, type),\r\n\r\n\t/**\r\n\t * 旋转颜色的色相。\r\n\t * @param {string} color - 输入的颜色。\r\n\t * @param {number} degrees - 旋转的度数。\r\n\t * @returns {string} 调整后的颜色。\r\n\t */\r\n\trotate: (color, degrees, format = 'rgb', type = 'string') => convertFormat(Color(color).rotate(degrees), format, type),\r\n\r\n\t/**\r\n\t * 调整颜色的透明度。\r\n\t * @param {string} color - 输入的颜色。\r\n\t * @param {number} value - 透明度值（0-1，其中 1 是不透明）。\r\n\t * @returns {string} 调整后的颜色。\r\n\t */\r\n\tadjustAlpha: (color, value, format = 'rgb', type = 'string') => convertFormat(Color(color).alpha(value), format, type),\r\n\r\n\t/**\r\n\t * 获取颜色的亮度。\r\n\t * @param {string} color - 输入的颜色。\r\n\t * @returns {number} 颜色的亮度值（0-1）。\r\n\t */\r\n\tluminosity: (color, format) => Color(color).luminosity(),\r\n\r\n\t/**\r\n\t * 判断颜色是否为暗色。\r\n\t * @param {string} color - 输入的颜色。\r\n\t * @returns {boolean} 如果是暗色则返回 true，否则返回 false。\r\n\t */\r\n\tisDark: (color, format) => Color(color).isDark(),\r\n\r\n\t/**\r\n\t * 判断颜色是否为亮色。\r\n\t * @param {string} color - 输入的颜色。\r\n\t * @returns {boolean} 如果是亮色则返回 true，否则返回 false。\r\n\t */\r\n\tisLight: (color, format) => Color(color).isLight()\r\n};"],"names":["Color"],"mappings":"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"}